/*
 * BitBuggy Shipping
 *
 * Management of shipping and delivery information.
 *
 * The version of the OpenAPI document: 2.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BitBuggy.Shipping.Maui.Shipping.Client.OpenAPIDateConverter;

namespace BitBuggy.Shipping.Maui.Shipping.Model
{
    /// <summary>
    /// The status of a shipment Due to varying sources of shipment delivery, this must be put into one unified response.
    /// </summary>
    [DataContract(Name = "ShipmentStatus")]
    public partial class ShipmentStatus : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public Status Message { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipmentStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentStatus" /> class.
        /// </summary>
        /// <param name="shipmentId">shipmentId (required).</param>
        /// <param name="expectedAt">expectedAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="deliveredAt">deliveredAt.</param>
        /// <param name="message">message (required).</param>
        public ShipmentStatus(Guid shipmentId = default(Guid), DateTime expectedAt = default(DateTime), DateTime updatedAt = default(DateTime), DateTime? deliveredAt = default(DateTime?), Status message = default(Status))
        {
            this.ShipmentId = shipmentId;
            this.ExpectedAt = expectedAt;
            this.UpdatedAt = updatedAt;
            this.Message = message;
            this.DeliveredAt = deliveredAt;
        }

        /// <summary>
        /// Gets or Sets ShipmentId
        /// </summary>
        [DataMember(Name = "shipment_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid ShipmentId { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedAt
        /// </summary>
        [DataMember(Name = "expected_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ExpectedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DeliveredAt
        /// </summary>
        [DataMember(Name = "delivered_at", EmitDefaultValue = true)]
        public DateTime? DeliveredAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipmentStatus {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ExpectedAt: ").Append(ExpectedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeliveredAt: ").Append(DeliveredAt).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
