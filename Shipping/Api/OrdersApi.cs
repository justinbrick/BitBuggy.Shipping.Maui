/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BitBuggy.Shipping.Maui.Shipping.Client;
using BitBuggy.Shipping.Maui.Shipping.Model;

namespace BitBuggy.Shipping.Maui.Shipping.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Order Delivery
        /// </summary>
        /// <remarks>
        /// Create a delivery for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createDeliveryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Delivery</returns>
        Delivery CreateOrderDeliveryOrdersOrderIdDeliveriesPost(Guid orderId, CreateDeliveryRequest createDeliveryRequest, int operationIndex = 0);

        /// <summary>
        /// Create Order Delivery
        /// </summary>
        /// <remarks>
        /// Create a delivery for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createDeliveryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Delivery</returns>
        ApiResponse<Delivery> CreateOrderDeliveryOrdersOrderIdDeliveriesPostWithHttpInfo(Guid orderId, CreateDeliveryRequest createDeliveryRequest, int operationIndex = 0);
        /// <summary>
        /// Create Order Return
        /// </summary>
        /// <remarks>
        /// Create a return for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createReturnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Return</returns>
        Return CreateOrderReturnOrdersOrderIdReturnsPost(Guid orderId, CreateReturnRequest createReturnRequest, int operationIndex = 0);

        /// <summary>
        /// Create Order Return
        /// </summary>
        /// <remarks>
        /// Create a return for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createReturnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Return</returns>
        ApiResponse<Return> CreateOrderReturnOrdersOrderIdReturnsPostWithHttpInfo(Guid orderId, CreateReturnRequest createReturnRequest, int operationIndex = 0);
        /// <summary>
        /// Get Order Deliveries
        /// </summary>
        /// <remarks>
        /// Get all the deliveries for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Delivery&gt;</returns>
        List<Delivery> GetOrderDeliveriesOrdersOrderIdDeliveriesGet(Guid orderId, int operationIndex = 0);

        /// <summary>
        /// Get Order Deliveries
        /// </summary>
        /// <remarks>
        /// Get all the deliveries for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Delivery&gt;</returns>
        ApiResponse<List<Delivery>> GetOrderDeliveriesOrdersOrderIdDeliveriesGetWithHttpInfo(Guid orderId, int operationIndex = 0);
        /// <summary>
        /// Get Order Returns
        /// </summary>
        /// <remarks>
        /// Get all the returns for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Return&gt;</returns>
        List<Return> GetOrderReturnsOrdersOrderIdReturnsGet(Guid orderId, int operationIndex = 0);

        /// <summary>
        /// Get Order Returns
        /// </summary>
        /// <remarks>
        /// Get all the returns for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Return&gt;</returns>
        ApiResponse<List<Return>> GetOrderReturnsOrdersOrderIdReturnsGetWithHttpInfo(Guid orderId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Order Delivery
        /// </summary>
        /// <remarks>
        /// Create a delivery for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createDeliveryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Delivery</returns>
        System.Threading.Tasks.Task<Delivery> CreateOrderDeliveryOrdersOrderIdDeliveriesPostAsync(Guid orderId, CreateDeliveryRequest createDeliveryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Order Delivery
        /// </summary>
        /// <remarks>
        /// Create a delivery for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createDeliveryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Delivery)</returns>
        System.Threading.Tasks.Task<ApiResponse<Delivery>> CreateOrderDeliveryOrdersOrderIdDeliveriesPostWithHttpInfoAsync(Guid orderId, CreateDeliveryRequest createDeliveryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Order Return
        /// </summary>
        /// <remarks>
        /// Create a return for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createReturnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Return</returns>
        System.Threading.Tasks.Task<Return> CreateOrderReturnOrdersOrderIdReturnsPostAsync(Guid orderId, CreateReturnRequest createReturnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Order Return
        /// </summary>
        /// <remarks>
        /// Create a return for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createReturnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Return)</returns>
        System.Threading.Tasks.Task<ApiResponse<Return>> CreateOrderReturnOrdersOrderIdReturnsPostWithHttpInfoAsync(Guid orderId, CreateReturnRequest createReturnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Order Deliveries
        /// </summary>
        /// <remarks>
        /// Get all the deliveries for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Delivery&gt;</returns>
        System.Threading.Tasks.Task<List<Delivery>> GetOrderDeliveriesOrdersOrderIdDeliveriesGetAsync(Guid orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Deliveries
        /// </summary>
        /// <remarks>
        /// Get all the deliveries for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Delivery&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Delivery>>> GetOrderDeliveriesOrdersOrderIdDeliveriesGetWithHttpInfoAsync(Guid orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Order Returns
        /// </summary>
        /// <remarks>
        /// Get all the returns for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Return&gt;</returns>
        System.Threading.Tasks.Task<List<Return>> GetOrderReturnsOrdersOrderIdReturnsGetAsync(Guid orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Order Returns
        /// </summary>
        /// <remarks>
        /// Get all the returns for a given order.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Return&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Return>>> GetOrderReturnsOrdersOrderIdReturnsGetWithHttpInfoAsync(Guid orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private BitBuggy.Shipping.Maui.Shipping.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(string basePath)
        {
            this.Configuration = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.MergeConfigurations(
                BitBuggy.Shipping.Maui.Shipping.Client.GlobalConfiguration.Instance,
                new BitBuggy.Shipping.Maui.Shipping.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(BitBuggy.Shipping.Maui.Shipping.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.MergeConfigurations(
                BitBuggy.Shipping.Maui.Shipping.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrdersApi(BitBuggy.Shipping.Maui.Shipping.Client.ISynchronousClient client, BitBuggy.Shipping.Maui.Shipping.Client.IAsynchronousClient asyncClient, BitBuggy.Shipping.Maui.Shipping.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BitBuggy.Shipping.Maui.Shipping.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BitBuggy.Shipping.Maui.Shipping.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BitBuggy.Shipping.Maui.Shipping.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BitBuggy.Shipping.Maui.Shipping.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Order Delivery Create a delivery for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createDeliveryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Delivery</returns>
        public Delivery CreateOrderDeliveryOrdersOrderIdDeliveriesPost(Guid orderId, CreateDeliveryRequest createDeliveryRequest, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Delivery> localVarResponse = CreateOrderDeliveryOrdersOrderIdDeliveriesPostWithHttpInfo(orderId, createDeliveryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Order Delivery Create a delivery for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createDeliveryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Delivery</returns>
        public BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Delivery> CreateOrderDeliveryOrdersOrderIdDeliveriesPostWithHttpInfo(Guid orderId, CreateDeliveryRequest createDeliveryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createDeliveryRequest' is set
            if (createDeliveryRequest == null)
            {
                throw new BitBuggy.Shipping.Maui.Shipping.Client.ApiException(400, "Missing required parameter 'createDeliveryRequest' when calling OrdersApi->CreateOrderDeliveryOrdersOrderIdDeliveriesPost");
            }

            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = createDeliveryRequest;

            localVarRequestOptions.Operation = "OrdersApi.CreateOrderDeliveryOrdersOrderIdDeliveriesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Delivery>("/orders/{order_id}/deliveries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderDeliveryOrdersOrderIdDeliveriesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Order Delivery Create a delivery for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createDeliveryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Delivery</returns>
        public async System.Threading.Tasks.Task<Delivery> CreateOrderDeliveryOrdersOrderIdDeliveriesPostAsync(Guid orderId, CreateDeliveryRequest createDeliveryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Delivery> localVarResponse = await CreateOrderDeliveryOrdersOrderIdDeliveriesPostWithHttpInfoAsync(orderId, createDeliveryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Order Delivery Create a delivery for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createDeliveryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Delivery)</returns>
        public async System.Threading.Tasks.Task<BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Delivery>> CreateOrderDeliveryOrdersOrderIdDeliveriesPostWithHttpInfoAsync(Guid orderId, CreateDeliveryRequest createDeliveryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDeliveryRequest' is set
            if (createDeliveryRequest == null)
            {
                throw new BitBuggy.Shipping.Maui.Shipping.Client.ApiException(400, "Missing required parameter 'createDeliveryRequest' when calling OrdersApi->CreateOrderDeliveryOrdersOrderIdDeliveriesPost");
            }


            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = createDeliveryRequest;

            localVarRequestOptions.Operation = "OrdersApi.CreateOrderDeliveryOrdersOrderIdDeliveriesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Delivery>("/orders/{order_id}/deliveries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderDeliveryOrdersOrderIdDeliveriesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Order Return Create a return for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createReturnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Return</returns>
        public Return CreateOrderReturnOrdersOrderIdReturnsPost(Guid orderId, CreateReturnRequest createReturnRequest, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Return> localVarResponse = CreateOrderReturnOrdersOrderIdReturnsPostWithHttpInfo(orderId, createReturnRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Order Return Create a return for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createReturnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Return</returns>
        public BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Return> CreateOrderReturnOrdersOrderIdReturnsPostWithHttpInfo(Guid orderId, CreateReturnRequest createReturnRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createReturnRequest' is set
            if (createReturnRequest == null)
            {
                throw new BitBuggy.Shipping.Maui.Shipping.Client.ApiException(400, "Missing required parameter 'createReturnRequest' when calling OrdersApi->CreateOrderReturnOrdersOrderIdReturnsPost");
            }

            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = createReturnRequest;

            localVarRequestOptions.Operation = "OrdersApi.CreateOrderReturnOrdersOrderIdReturnsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Return>("/orders/{order_id}/returns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderReturnOrdersOrderIdReturnsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Order Return Create a return for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createReturnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Return</returns>
        public async System.Threading.Tasks.Task<Return> CreateOrderReturnOrdersOrderIdReturnsPostAsync(Guid orderId, CreateReturnRequest createReturnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Return> localVarResponse = await CreateOrderReturnOrdersOrderIdReturnsPostWithHttpInfoAsync(orderId, createReturnRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Order Return Create a return for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="createReturnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Return)</returns>
        public async System.Threading.Tasks.Task<BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Return>> CreateOrderReturnOrdersOrderIdReturnsPostWithHttpInfoAsync(Guid orderId, CreateReturnRequest createReturnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createReturnRequest' is set
            if (createReturnRequest == null)
            {
                throw new BitBuggy.Shipping.Maui.Shipping.Client.ApiException(400, "Missing required parameter 'createReturnRequest' when calling OrdersApi->CreateOrderReturnOrdersOrderIdReturnsPost");
            }


            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = createReturnRequest;

            localVarRequestOptions.Operation = "OrdersApi.CreateOrderReturnOrdersOrderIdReturnsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Return>("/orders/{order_id}/returns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderReturnOrdersOrderIdReturnsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Deliveries Get all the deliveries for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Delivery&gt;</returns>
        public List<Delivery> GetOrderDeliveriesOrdersOrderIdDeliveriesGet(Guid orderId, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Delivery>> localVarResponse = GetOrderDeliveriesOrdersOrderIdDeliveriesGetWithHttpInfo(orderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Deliveries Get all the deliveries for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Delivery&gt;</returns>
        public BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Delivery>> GetOrderDeliveriesOrdersOrderIdDeliveriesGetWithHttpInfo(Guid orderId, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(orderId)); // path parameter

            localVarRequestOptions.Operation = "OrdersApi.GetOrderDeliveriesOrdersOrderIdDeliveriesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Delivery>>("/orders/{order_id}/deliveries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderDeliveriesOrdersOrderIdDeliveriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Deliveries Get all the deliveries for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Delivery&gt;</returns>
        public async System.Threading.Tasks.Task<List<Delivery>> GetOrderDeliveriesOrdersOrderIdDeliveriesGetAsync(Guid orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Delivery>> localVarResponse = await GetOrderDeliveriesOrdersOrderIdDeliveriesGetWithHttpInfoAsync(orderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Deliveries Get all the deliveries for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Delivery&gt;)</returns>
        public async System.Threading.Tasks.Task<BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Delivery>>> GetOrderDeliveriesOrdersOrderIdDeliveriesGetWithHttpInfoAsync(Guid orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(orderId)); // path parameter

            localVarRequestOptions.Operation = "OrdersApi.GetOrderDeliveriesOrdersOrderIdDeliveriesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Delivery>>("/orders/{order_id}/deliveries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderDeliveriesOrdersOrderIdDeliveriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Returns Get all the returns for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Return&gt;</returns>
        public List<Return> GetOrderReturnsOrdersOrderIdReturnsGet(Guid orderId, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Return>> localVarResponse = GetOrderReturnsOrdersOrderIdReturnsGetWithHttpInfo(orderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Returns Get all the returns for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Return&gt;</returns>
        public BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Return>> GetOrderReturnsOrdersOrderIdReturnsGetWithHttpInfo(Guid orderId, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(orderId)); // path parameter

            localVarRequestOptions.Operation = "OrdersApi.GetOrderReturnsOrdersOrderIdReturnsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Return>>("/orders/{order_id}/returns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderReturnsOrdersOrderIdReturnsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Order Returns Get all the returns for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Return&gt;</returns>
        public async System.Threading.Tasks.Task<List<Return>> GetOrderReturnsOrdersOrderIdReturnsGetAsync(Guid orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Return>> localVarResponse = await GetOrderReturnsOrdersOrderIdReturnsGetWithHttpInfoAsync(orderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Order Returns Get all the returns for a given order.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Return&gt;)</returns>
        public async System.Threading.Tasks.Task<BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Return>>> GetOrderReturnsOrdersOrderIdReturnsGetWithHttpInfoAsync(Guid orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(orderId)); // path parameter

            localVarRequestOptions.Operation = "OrdersApi.GetOrderReturnsOrdersOrderIdReturnsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Return>>("/orders/{order_id}/returns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderReturnsOrdersOrderIdReturnsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
