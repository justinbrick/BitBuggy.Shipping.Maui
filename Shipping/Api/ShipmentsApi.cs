/*
 * BitBuggy Shipping
 *
 * Management of shipping and delivery information.
 *
 * The version of the OpenAPI document: 2.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BitBuggy.Shipping.Maui.Shipping.Client;
using BitBuggy.Shipping.Maui.Shipping.Model;

namespace BitBuggy.Shipping.Maui.Shipping.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Shipment
        /// </summary>
        /// <remarks>
        /// Get the shipment using a specific shipment ID.  :param shipment_id: the ID of the shipment to get :return: the shipment
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Shipment</returns>
        Shipment GetShipment(Guid shipmentId, int operationIndex = 0);

        /// <summary>
        /// Get Shipment
        /// </summary>
        /// <remarks>
        /// Get the shipment using a specific shipment ID.  :param shipment_id: the ID of the shipment to get :return: the shipment
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Shipment</returns>
        ApiResponse<Shipment> GetShipmentWithHttpInfo(Guid shipmentId, int operationIndex = 0);
        /// <summary>
        /// Get Shipment Status
        /// </summary>
        /// <remarks>
        /// Get the current status of a shipment. Queries third parties - expect failures.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShipmentStatus</returns>
        ShipmentStatus GetShipmentStatus(Guid shipmentId, int operationIndex = 0);

        /// <summary>
        /// Get Shipment Status
        /// </summary>
        /// <remarks>
        /// Get the current status of a shipment. Queries third parties - expect failures.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShipmentStatus</returns>
        ApiResponse<ShipmentStatus> GetShipmentStatusWithHttpInfo(Guid shipmentId, int operationIndex = 0);
        /// <summary>
        /// Get Shipments
        /// </summary>
        /// <remarks>
        /// Get all the shipments related to this user.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="dateDesc"> (optional, default to true)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="provider"> (optional)</param>
        /// <param name="fromAddress"> (optional)</param>
        /// <param name="shippingAddress"> (optional)</param>
        /// <param name="deliveryId"> (optional)</param>
        /// <param name="trackingId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Shipment&gt;</returns>
        List<Shipment> GetShipments(int? limit = default(int?), int? offset = default(int?), bool? dateDesc = default(bool?), Status? status = default(Status?), Provider? provider = default(Provider?), string? fromAddress = default(string?), string? shippingAddress = default(string?), string? deliveryId = default(string?), string? trackingId = default(string?), Guid? userId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get Shipments
        /// </summary>
        /// <remarks>
        /// Get all the shipments related to this user.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="dateDesc"> (optional, default to true)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="provider"> (optional)</param>
        /// <param name="fromAddress"> (optional)</param>
        /// <param name="shippingAddress"> (optional)</param>
        /// <param name="deliveryId"> (optional)</param>
        /// <param name="trackingId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Shipment&gt;</returns>
        ApiResponse<List<Shipment>> GetShipmentsWithHttpInfo(int? limit = default(int?), int? offset = default(int?), bool? dateDesc = default(bool?), Status? status = default(Status?), Provider? provider = default(Provider?), string? fromAddress = default(string?), string? shippingAddress = default(string?), string? deliveryId = default(string?), string? trackingId = default(string?), Guid? userId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Update Shipment Status
        /// </summary>
        /// <remarks>
        /// Update the status of a shipment.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="shipmentStatusPatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShipmentStatus</returns>
        ShipmentStatus UpdateShipmentStatus(Guid shipmentId, ShipmentStatusPatchRequest shipmentStatusPatchRequest, int operationIndex = 0);

        /// <summary>
        /// Update Shipment Status
        /// </summary>
        /// <remarks>
        /// Update the status of a shipment.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="shipmentStatusPatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShipmentStatus</returns>
        ApiResponse<ShipmentStatus> UpdateShipmentStatusWithHttpInfo(Guid shipmentId, ShipmentStatusPatchRequest shipmentStatusPatchRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Shipment
        /// </summary>
        /// <remarks>
        /// Get the shipment using a specific shipment ID.  :param shipment_id: the ID of the shipment to get :return: the shipment
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Shipment</returns>
        System.Threading.Tasks.Task<Shipment> GetShipmentAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Shipment
        /// </summary>
        /// <remarks>
        /// Get the shipment using a specific shipment ID.  :param shipment_id: the ID of the shipment to get :return: the shipment
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Shipment>> GetShipmentWithHttpInfoAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Shipment Status
        /// </summary>
        /// <remarks>
        /// Get the current status of a shipment. Queries third parties - expect failures.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentStatus</returns>
        System.Threading.Tasks.Task<ShipmentStatus> GetShipmentStatusAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Shipment Status
        /// </summary>
        /// <remarks>
        /// Get the current status of a shipment. Queries third parties - expect failures.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentStatus>> GetShipmentStatusWithHttpInfoAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Shipments
        /// </summary>
        /// <remarks>
        /// Get all the shipments related to this user.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="dateDesc"> (optional, default to true)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="provider"> (optional)</param>
        /// <param name="fromAddress"> (optional)</param>
        /// <param name="shippingAddress"> (optional)</param>
        /// <param name="deliveryId"> (optional)</param>
        /// <param name="trackingId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Shipment&gt;</returns>
        System.Threading.Tasks.Task<List<Shipment>> GetShipmentsAsync(int? limit = default(int?), int? offset = default(int?), bool? dateDesc = default(bool?), Status? status = default(Status?), Provider? provider = default(Provider?), string? fromAddress = default(string?), string? shippingAddress = default(string?), string? deliveryId = default(string?), string? trackingId = default(string?), Guid? userId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Shipments
        /// </summary>
        /// <remarks>
        /// Get all the shipments related to this user.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="dateDesc"> (optional, default to true)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="provider"> (optional)</param>
        /// <param name="fromAddress"> (optional)</param>
        /// <param name="shippingAddress"> (optional)</param>
        /// <param name="deliveryId"> (optional)</param>
        /// <param name="trackingId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Shipment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Shipment>>> GetShipmentsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), bool? dateDesc = default(bool?), Status? status = default(Status?), Provider? provider = default(Provider?), string? fromAddress = default(string?), string? shippingAddress = default(string?), string? deliveryId = default(string?), string? trackingId = default(string?), Guid? userId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Shipment Status
        /// </summary>
        /// <remarks>
        /// Update the status of a shipment.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="shipmentStatusPatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentStatus</returns>
        System.Threading.Tasks.Task<ShipmentStatus> UpdateShipmentStatusAsync(Guid shipmentId, ShipmentStatusPatchRequest shipmentStatusPatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Shipment Status
        /// </summary>
        /// <remarks>
        /// Update the status of a shipment.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="shipmentStatusPatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipmentStatus>> UpdateShipmentStatusWithHttpInfoAsync(Guid shipmentId, ShipmentStatusPatchRequest shipmentStatusPatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShipmentsApi : IShipmentsApiSync, IShipmentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShipmentsApi : IShipmentsApi
    {
        private BitBuggy.Shipping.Maui.Shipping.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShipmentsApi(string basePath)
        {
            this.Configuration = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.MergeConfigurations(
                BitBuggy.Shipping.Maui.Shipping.Client.GlobalConfiguration.Instance,
                new BitBuggy.Shipping.Maui.Shipping.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShipmentsApi(BitBuggy.Shipping.Maui.Shipping.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.MergeConfigurations(
                BitBuggy.Shipping.Maui.Shipping.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ShipmentsApi(BitBuggy.Shipping.Maui.Shipping.Client.ISynchronousClient client, BitBuggy.Shipping.Maui.Shipping.Client.IAsynchronousClient asyncClient, BitBuggy.Shipping.Maui.Shipping.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BitBuggy.Shipping.Maui.Shipping.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BitBuggy.Shipping.Maui.Shipping.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BitBuggy.Shipping.Maui.Shipping.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BitBuggy.Shipping.Maui.Shipping.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Shipment Get the shipment using a specific shipment ID.  :param shipment_id: the ID of the shipment to get :return: the shipment
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Shipment</returns>
        public Shipment GetShipment(Guid shipmentId, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Shipment> localVarResponse = GetShipmentWithHttpInfo(shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipment Get the shipment using a specific shipment ID.  :param shipment_id: the ID of the shipment to get :return: the shipment
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Shipment</returns>
        public BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Shipment> GetShipmentWithHttpInfo(Guid shipmentId, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipment_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.GetShipment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Shipment>("/shipments/{shipment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shipment Get the shipment using a specific shipment ID.  :param shipment_id: the ID of the shipment to get :return: the shipment
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Shipment</returns>
        public async System.Threading.Tasks.Task<Shipment> GetShipmentAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Shipment> localVarResponse = await GetShipmentWithHttpInfoAsync(shipmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipment Get the shipment using a specific shipment ID.  :param shipment_id: the ID of the shipment to get :return: the shipment
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        public async System.Threading.Tasks.Task<BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Shipment>> GetShipmentWithHttpInfoAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipment_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.GetShipment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Shipment>("/shipments/{shipment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shipment Status Get the current status of a shipment. Queries third parties - expect failures.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShipmentStatus</returns>
        public ShipmentStatus GetShipmentStatus(Guid shipmentId, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<ShipmentStatus> localVarResponse = GetShipmentStatusWithHttpInfo(shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipment Status Get the current status of a shipment. Queries third parties - expect failures.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShipmentStatus</returns>
        public BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<ShipmentStatus> GetShipmentStatusWithHttpInfo(Guid shipmentId, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipment_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.GetShipmentStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ShipmentStatus>("/shipments/{shipment_id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shipment Status Get the current status of a shipment. Queries third parties - expect failures.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentStatus</returns>
        public async System.Threading.Tasks.Task<ShipmentStatus> GetShipmentStatusAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<ShipmentStatus> localVarResponse = await GetShipmentStatusWithHttpInfoAsync(shipmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipment Status Get the current status of a shipment. Queries third parties - expect failures.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentStatus)</returns>
        public async System.Threading.Tasks.Task<BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<ShipmentStatus>> GetShipmentStatusWithHttpInfoAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipment_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter

            localVarRequestOptions.Operation = "ShipmentsApi.GetShipmentStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ShipmentStatus>("/shipments/{shipment_id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipmentStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shipments Get all the shipments related to this user.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="dateDesc"> (optional, default to true)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="provider"> (optional)</param>
        /// <param name="fromAddress"> (optional)</param>
        /// <param name="shippingAddress"> (optional)</param>
        /// <param name="deliveryId"> (optional)</param>
        /// <param name="trackingId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Shipment&gt;</returns>
        public List<Shipment> GetShipments(int? limit = default(int?), int? offset = default(int?), bool? dateDesc = default(bool?), Status? status = default(Status?), Provider? provider = default(Provider?), string? fromAddress = default(string?), string? shippingAddress = default(string?), string? deliveryId = default(string?), string? trackingId = default(string?), Guid? userId = default(Guid?), int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Shipment>> localVarResponse = GetShipmentsWithHttpInfo(limit, offset, dateDesc, status, provider, fromAddress, shippingAddress, deliveryId, trackingId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipments Get all the shipments related to this user.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="dateDesc"> (optional, default to true)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="provider"> (optional)</param>
        /// <param name="fromAddress"> (optional)</param>
        /// <param name="shippingAddress"> (optional)</param>
        /// <param name="deliveryId"> (optional)</param>
        /// <param name="trackingId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Shipment&gt;</returns>
        public BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Shipment>> GetShipmentsWithHttpInfo(int? limit = default(int?), int? offset = default(int?), bool? dateDesc = default(bool?), Status? status = default(Status?), Provider? provider = default(Provider?), string? fromAddress = default(string?), string? shippingAddress = default(string?), string? deliveryId = default(string?), string? trackingId = default(string?), Guid? userId = default(Guid?), int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (dateDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "date_desc", dateDesc));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (provider != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "provider", provider));
            }
            if (fromAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "from_address", fromAddress));
            }
            if (shippingAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "shipping_address", shippingAddress));
            }
            if (deliveryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "delivery_id", deliveryId));
            }
            if (trackingId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "tracking_id", trackingId));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }

            localVarRequestOptions.Operation = "ShipmentsApi.GetShipments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Shipment>>("/shipments/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shipments Get all the shipments related to this user.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="dateDesc"> (optional, default to true)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="provider"> (optional)</param>
        /// <param name="fromAddress"> (optional)</param>
        /// <param name="shippingAddress"> (optional)</param>
        /// <param name="deliveryId"> (optional)</param>
        /// <param name="trackingId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Shipment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Shipment>> GetShipmentsAsync(int? limit = default(int?), int? offset = default(int?), bool? dateDesc = default(bool?), Status? status = default(Status?), Provider? provider = default(Provider?), string? fromAddress = default(string?), string? shippingAddress = default(string?), string? deliveryId = default(string?), string? trackingId = default(string?), Guid? userId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Shipment>> localVarResponse = await GetShipmentsWithHttpInfoAsync(limit, offset, dateDesc, status, provider, fromAddress, shippingAddress, deliveryId, trackingId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipments Get all the shipments related to this user.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="dateDesc"> (optional, default to true)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="provider"> (optional)</param>
        /// <param name="fromAddress"> (optional)</param>
        /// <param name="shippingAddress"> (optional)</param>
        /// <param name="deliveryId"> (optional)</param>
        /// <param name="trackingId"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Shipment&gt;)</returns>
        public async System.Threading.Tasks.Task<BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Shipment>>> GetShipmentsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), bool? dateDesc = default(bool?), Status? status = default(Status?), Provider? provider = default(Provider?), string? fromAddress = default(string?), string? shippingAddress = default(string?), string? deliveryId = default(string?), string? trackingId = default(string?), Guid? userId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (dateDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "date_desc", dateDesc));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (provider != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "provider", provider));
            }
            if (fromAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "from_address", fromAddress));
            }
            if (shippingAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "shipping_address", shippingAddress));
            }
            if (deliveryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "delivery_id", deliveryId));
            }
            if (trackingId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "tracking_id", trackingId));
            }
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }

            localVarRequestOptions.Operation = "ShipmentsApi.GetShipments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Shipment>>("/shipments/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Shipment Status Update the status of a shipment.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="shipmentStatusPatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShipmentStatus</returns>
        public ShipmentStatus UpdateShipmentStatus(Guid shipmentId, ShipmentStatusPatchRequest shipmentStatusPatchRequest, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<ShipmentStatus> localVarResponse = UpdateShipmentStatusWithHttpInfo(shipmentId, shipmentStatusPatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Shipment Status Update the status of a shipment.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="shipmentStatusPatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShipmentStatus</returns>
        public BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<ShipmentStatus> UpdateShipmentStatusWithHttpInfo(Guid shipmentId, ShipmentStatusPatchRequest shipmentStatusPatchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'shipmentStatusPatchRequest' is set
            if (shipmentStatusPatchRequest == null)
            {
                throw new BitBuggy.Shipping.Maui.Shipping.Client.ApiException(400, "Missing required parameter 'shipmentStatusPatchRequest' when calling ShipmentsApi->UpdateShipmentStatus");
            }

            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipment_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.Data = shipmentStatusPatchRequest;

            localVarRequestOptions.Operation = "ShipmentsApi.UpdateShipmentStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ShipmentStatus>("/shipments/{shipment_id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Shipment Status Update the status of a shipment.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="shipmentStatusPatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipmentStatus</returns>
        public async System.Threading.Tasks.Task<ShipmentStatus> UpdateShipmentStatusAsync(Guid shipmentId, ShipmentStatusPatchRequest shipmentStatusPatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<ShipmentStatus> localVarResponse = await UpdateShipmentStatusWithHttpInfoAsync(shipmentId, shipmentStatusPatchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Shipment Status Update the status of a shipment.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="shipmentStatusPatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipmentStatus)</returns>
        public async System.Threading.Tasks.Task<BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<ShipmentStatus>> UpdateShipmentStatusWithHttpInfoAsync(Guid shipmentId, ShipmentStatusPatchRequest shipmentStatusPatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipmentStatusPatchRequest' is set
            if (shipmentStatusPatchRequest == null)
            {
                throw new BitBuggy.Shipping.Maui.Shipping.Client.ApiException(400, "Missing required parameter 'shipmentStatusPatchRequest' when calling ShipmentsApi->UpdateShipmentStatus");
            }


            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipment_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter
            localVarRequestOptions.Data = shipmentStatusPatchRequest;

            localVarRequestOptions.Operation = "ShipmentsApi.UpdateShipmentStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ShipmentStatus>("/shipments/{shipment_id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateShipmentStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
