/*
 * BitBuggy Shipping
 *
 * Management of shipping and delivery information.
 *
 * The version of the OpenAPI document: 2.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BitBuggy.Shipping.Maui.Shipping.Client;
using BitBuggy.Shipping.Maui.Shipping.Model;

namespace BitBuggy.Shipping.Maui.Shipping.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInternalApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Claim Shipment
        /// </summary>
        /// <remarks>
        /// Claim a shipment for delivery.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Shipment</returns>
        Shipment ClaimOpenShipment(Guid shipmentId, int operationIndex = 0);

        /// <summary>
        /// Claim Shipment
        /// </summary>
        /// <remarks>
        /// Claim a shipment for delivery.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Shipment</returns>
        ApiResponse<Shipment> ClaimOpenShipmentWithHttpInfo(Guid shipmentId, int operationIndex = 0);
        /// <summary>
        /// Get Open Shipments
        /// </summary>
        /// <remarks>
        /// An endpoint which returns shipments that are internal, and in a pending status. This allows employees to take on individual shipments as needed. In a normal setting, this would require likely be automatically assigned to a driver.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Shipment&gt;</returns>
        List<Shipment> GetOpenShipments(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Open Shipments
        /// </summary>
        /// <remarks>
        /// An endpoint which returns shipments that are internal, and in a pending status. This allows employees to take on individual shipments as needed. In a normal setting, this would require likely be automatically assigned to a driver.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Shipment&gt;</returns>
        ApiResponse<List<Shipment>> GetOpenShipmentsWithHttpInfo(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInternalApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Claim Shipment
        /// </summary>
        /// <remarks>
        /// Claim a shipment for delivery.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Shipment</returns>
        System.Threading.Tasks.Task<Shipment> ClaimOpenShipmentAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Claim Shipment
        /// </summary>
        /// <remarks>
        /// Claim a shipment for delivery.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Shipment>> ClaimOpenShipmentWithHttpInfoAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Open Shipments
        /// </summary>
        /// <remarks>
        /// An endpoint which returns shipments that are internal, and in a pending status. This allows employees to take on individual shipments as needed. In a normal setting, this would require likely be automatically assigned to a driver.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Shipment&gt;</returns>
        System.Threading.Tasks.Task<List<Shipment>> GetOpenShipmentsAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Open Shipments
        /// </summary>
        /// <remarks>
        /// An endpoint which returns shipments that are internal, and in a pending status. This allows employees to take on individual shipments as needed. In a normal setting, this would require likely be automatically assigned to a driver.
        /// </remarks>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Shipment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Shipment>>> GetOpenShipmentsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInternalApi : IInternalApiSync, IInternalApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InternalApi : IInternalApi
    {
        private BitBuggy.Shipping.Maui.Shipping.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InternalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InternalApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InternalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InternalApi(string basePath)
        {
            this.Configuration = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.MergeConfigurations(
                BitBuggy.Shipping.Maui.Shipping.Client.GlobalConfiguration.Instance,
                new BitBuggy.Shipping.Maui.Shipping.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InternalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InternalApi(BitBuggy.Shipping.Maui.Shipping.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.MergeConfigurations(
                BitBuggy.Shipping.Maui.Shipping.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BitBuggy.Shipping.Maui.Shipping.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InternalApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InternalApi(BitBuggy.Shipping.Maui.Shipping.Client.ISynchronousClient client, BitBuggy.Shipping.Maui.Shipping.Client.IAsynchronousClient asyncClient, BitBuggy.Shipping.Maui.Shipping.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BitBuggy.Shipping.Maui.Shipping.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BitBuggy.Shipping.Maui.Shipping.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BitBuggy.Shipping.Maui.Shipping.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BitBuggy.Shipping.Maui.Shipping.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BitBuggy.Shipping.Maui.Shipping.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Claim Shipment Claim a shipment for delivery.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Shipment</returns>
        public Shipment ClaimOpenShipment(Guid shipmentId, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Shipment> localVarResponse = ClaimOpenShipmentWithHttpInfo(shipmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Claim Shipment Claim a shipment for delivery.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Shipment</returns>
        public BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Shipment> ClaimOpenShipmentWithHttpInfo(Guid shipmentId, int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipment_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter

            localVarRequestOptions.Operation = "InternalApi.ClaimOpenShipment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Shipment>("/internal/open_shipments/{shipment_id}/claim", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClaimOpenShipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Claim Shipment Claim a shipment for delivery.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Shipment</returns>
        public async System.Threading.Tasks.Task<Shipment> ClaimOpenShipmentAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Shipment> localVarResponse = await ClaimOpenShipmentWithHttpInfoAsync(shipmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Claim Shipment Claim a shipment for delivery.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Shipment)</returns>
        public async System.Threading.Tasks.Task<BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<Shipment>> ClaimOpenShipmentWithHttpInfoAsync(Guid shipmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("shipment_id", BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToString(shipmentId)); // path parameter

            localVarRequestOptions.Operation = "InternalApi.ClaimOpenShipment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Shipment>("/internal/open_shipments/{shipment_id}/claim", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClaimOpenShipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Open Shipments An endpoint which returns shipments that are internal, and in a pending status. This allows employees to take on individual shipments as needed. In a normal setting, this would require likely be automatically assigned to a driver.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Shipment&gt;</returns>
        public List<Shipment> GetOpenShipments(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Shipment>> localVarResponse = GetOpenShipmentsWithHttpInfo(limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Open Shipments An endpoint which returns shipments that are internal, and in a pending status. This allows employees to take on individual shipments as needed. In a normal setting, this would require likely be automatically assigned to a driver.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Shipment&gt;</returns>
        public BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Shipment>> GetOpenShipmentsWithHttpInfo(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "InternalApi.GetOpenShipments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Shipment>>("/internal/open_shipments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenShipments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Open Shipments An endpoint which returns shipments that are internal, and in a pending status. This allows employees to take on individual shipments as needed. In a normal setting, this would require likely be automatically assigned to a driver.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Shipment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Shipment>> GetOpenShipmentsAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Shipment>> localVarResponse = await GetOpenShipmentsWithHttpInfoAsync(limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Open Shipments An endpoint which returns shipments that are internal, and in a pending status. This allows employees to take on individual shipments as needed. In a normal setting, this would require likely be automatically assigned to a driver.
        /// </summary>
        /// <exception cref="BitBuggy.Shipping.Maui.Shipping.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Shipment&gt;)</returns>
        public async System.Threading.Tasks.Task<BitBuggy.Shipping.Maui.Shipping.Client.ApiResponse<List<Shipment>>> GetOpenShipmentsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions localVarRequestOptions = new BitBuggy.Shipping.Maui.Shipping.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BitBuggy.Shipping.Maui.Shipping.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "InternalApi.GetOpenShipments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Shipment>>("/internal/open_shipments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenShipments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
